import 'react'

class GameMaster {
	constructor() {
		this.state = {
			progress: 'title',
			eventListeners: [], // [[ type, listener ]...]
			handLog: [],
			chatLog: [],
		}
	}

	progresses = [
		'title',
		'playing',
		'result',
	]

	/////////////////////////////////////////////////////////////////
	/// getter
	/////////////////////////////////////////////////////////////////
	get progress(){
		return this.state.progress
	}

	get hands(){
		return this.state.handLog
	}

	get question(){
		return Math.abs(this.state.handLog.slice(-1)[0].hand.slice(-1)[0])
	}

	/////////////////////////////////////////////////////////////////
	/// setter
	/////////////////////////////////////////////////////////////////
	set progress(value) {
		this.state.progress = value
		this.dispatchEvent("progressChange")
	}

	/////////////////////////////////////////////////////////////////
	/// 
	/////////////////////////////////////////////////////////////////
	addEventListener = (type, listener) => {
		const { eventListeners } = this.state
		return typeof(listener) === "function" && eventListeners.push([ type, listener ])
	}

	/////////////////////////////////////////////////////////////////
	/// 
	/////////////////////////////////////////////////////////////////
	removeEventListener = (type, listener) => {}

	/////////////////////////////////////////////////////////////////
	/// 
	/////////////////////////////////////////////////////////////////
	dispatchEvent = event => {
		const { eventListeners } = this.state
		eventListeners.map(element => {
			return element[0] === event && element[1]()
		})
	}

	/////////////////////////////////////////////////////////////////
	/// 
	/////////////////////////////////////////////////////////////////
	initialize = () => {
		this.state.handLog = [{ hand: [ parseInt(Math.random() * 8 +1) ] }]
	}

	/////////////////////////////////////////////////////////////////
	/// 
	/////////////////////////////////////////////////////////////////
	checkSum = hand => {
		const question = this.question
		return question === hand.reduce((accumulator, currentValue) => accumulator + currentValue )
	}

	/////////////////////////////////////////////////////////////////
	/// 
	/////////////////////////////////////////////////////////////////
	checkOverlap = hand => {
		const verify = hand ? this.verify(hand) : this.verify(this.hands.slice(-1)[0].hand)
		return this.hands.findIndex(currentValue => (
			this.verify(currentValue.hand) === verify)
		)
	}

	/////////////////////////////////////////////////////////////////
	/// 
	/////////////////////////////////////////////////////////////////
	verify = hand => {
		return hand.map(currentValue => Math.abs(currentValue)).sort().toString()
	}
}

export default new GameMaster() // インスタンスを出力するとシングルトンで実装できる
